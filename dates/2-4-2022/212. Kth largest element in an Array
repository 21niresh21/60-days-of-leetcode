#Problem Link

https://leetcode.com/problems/kth-largest-element-in-an-array/

Brute Force : 
O(n log n)
---One naive way to do this is sort the array first and simply return the kth element from the array still checking for the repeated elements
as there can be repeated elements in the array

Sample test case:
[3,2,1,3,4] k=4
After sorting --> [1,2,3,3,4]
The return answer should be 4 rather 3 which is the kth index

References
https://www.geeksforgeeks.org/sort-c-stl/
https://www.cplusplus.com/reference/algorithm/sort/

Space --> O(max(array)) -- In worst case this can be 10^8 sized array according to constraints  
Create an array of binary values -- > if its a one the element is given in the input
Time --> O(n)  -- Simple return the first kth element which has the value 1

The solution is more like counting sort but not the counting part

References:
https://www.geeksforgeeks.org/counting-sort/

Space --> O(n)  
Time ---> O(n + nlogn)
Create a heap using priority queue where in the popped element will be always the largest one
Note that the priority element can be modified to retrieve min element too not just max or any other user given ordering
Pop the element from priority queue k-1 times and return the kth element form priority queue

References 
https://stackoverflow.com/questions/34693414/what-is-the-time-complexity-of-constructing-a-priorityqueue-from-a-collection
https://en.cppreference.com/w/cpp/container/priority_queue
https://www.geeksforgeeks.org/priority-queue-in-cpp-stl/

